<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Developments on Unigornel</title>
    <link>/development/</link>
    <description>Recent content in Developments on Unigornel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Jul 2016 17:39:12 +0200</lastBuildDate>
    <atom:link href="/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>System Calls</title>
      <link>/development/systemcalls/</link>
      <pubDate>Mon, 04 Jul 2016 17:39:12 +0200</pubDate>
      
      <guid>/development/systemcalls/</guid>
      <description>

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;System calls are functions implemented by Mini-OS that can be called from the Go runtime. Most system calls are implemented in &lt;code&gt;syscalls.c&lt;/code&gt;, &lt;code&gt;mmap.c&lt;/code&gt; and &lt;code&gt;futex.c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Calling these functions from Go requires two steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a function written in Go assembly that calls these functions&lt;/li&gt;
&lt;li&gt;Create a Go function that wraps the Go assembly&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both the &lt;code&gt;runtime&lt;/code&gt; and the &lt;code&gt;syscall&lt;/code&gt; package need access to lower level system calls.&lt;/p&gt;

&lt;h2 id=&#34;adding-a-system-call&#34;&gt;Adding a system call&lt;/h2&gt;

&lt;p&gt;After adding new system calls to Mini-OS with annotations (see examples in &lt;code&gt;syscalls.c&lt;/code&gt; and &lt;code&gt;include/syscalls.h&lt;/code&gt;), update the Go code base by running the following script from Mini-OS:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd unigornel/minios/tools
$ ./updatesys.bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll probably want to use your new system call in places like &lt;code&gt;syscall/zsyscall_unigornel_amd64.go&lt;/code&gt;, which is not (yet) generated. &lt;a href=&#34;https://github.ugent.be/unigornel/go/commit/3951f57f5f2090ef2cc32dfd5f1aa53bcd3ce8f2&#34;&gt;commit 3951f57f&lt;/a&gt; gives a good example on how to add a system call.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;strong&gt;Important&lt;/strong&gt;: You must still add your C symbol to &amp;ldquo;runtime/cgo/unigornel.go&amp;rdquo; &lt;a href=&#34;https://github.com/unigornel/go/tree/master/src/runtime/cgo/unigornel.go&#34;&gt;check examples&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Roadmap</title>
      <link>/development/roadmap/</link>
      <pubDate>Mon, 04 Jul 2016 17:31:54 +0200</pubDate>
      
      <guid>/development/roadmap/</guid>
      <description>

&lt;p&gt;The unigornel project is in the development phase. Some components are working, some components are partially working, some components are under development and some components are missing.&lt;/p&gt;

&lt;h2 id=&#34;what-s-next&#34;&gt;What&amp;rsquo;s Next&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/unigornel/unigornel/issues/1&#34;&gt;Fix memory management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/unigornel/unigornel/issues/2&#34;&gt;Implement full network stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Convert functionality form C to Go&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;working&#34;&gt;Working&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Compiling unikernels&lt;/li&gt;
&lt;li&gt;Console input/output&lt;/li&gt;
&lt;li&gt;Basic memory&lt;/li&gt;
&lt;li&gt;Ping replies&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Debugging a Unikernel</title>
      <link>/development/debugging/</link>
      <pubDate>Mon, 04 Jul 2016 16:46:24 +0200</pubDate>
      
      <guid>/development/debugging/</guid>
      <description>

&lt;h2 id=&#34;installing-gdbsx&#34;&gt;Installing gdbsx&lt;/h2&gt;

&lt;p&gt;Xen has a debugging tool for guests: &lt;code&gt;gdbsx&lt;/code&gt;. It is maintained in the &lt;a href=&#34;http://xenbits.xen.org/gitweb/?p=xen.git;a=tree;f=tools/debugger/gdbsx;h=9a0f5937e0a207f1431c0f4ed5e2f9bd0c555074;hb=HEAD&#34;&gt;Xen source tree&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To compile and install &lt;code&gt;gdbsx&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# apt-get install python-dev gettext bin86 bcc iasl uuid-dev libglib2.0-dev libpixman-1-dev libaio-dev libssl-dev libyajl-dev libncurses5-dev
$ git clone git://xenbits.xen.org/xen.git
$ xl info | grep version
xen_version : 4.4.1
$ cd xen
$ git checkout RELEASE-4.4.1
$ cd tools
$ ./configure
$ cd debugger/gdbsx
$ make
# install -m 0755 gdbsx /usr/local/bin/gdbsx
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is crucial that you checkout the current release of Xen matched to your system installation.&lt;/p&gt;

&lt;h2 id=&#34;using-gdbsx&#34;&gt;Using gdbsx&lt;/h2&gt;

&lt;p&gt;Debugging a Xen guest takes two steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Start the Xen guest in paused mode (e.g. &lt;code&gt;xl create -p -c config.xen&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Get the domain ID of the host (e.g. &lt;code&gt;xl domid domain-name-here&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Attach &lt;code&gt;gdbsx&lt;/code&gt; (e.g. &lt;code&gt;gdbsx -a dom-id-here 64 9000 -d&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Attach &lt;code&gt;gdb&lt;/code&gt; to the running &lt;code&gt;gdbsx&lt;/code&gt;-instance (e.g. &lt;code&gt;gdb -ex &#39;target remote:9000&#39; mini-os&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;gdb&lt;/code&gt; to debug: (e.g. in &lt;code&gt;gdb&lt;/code&gt; type &lt;code&gt;ni&lt;/code&gt; for next instruction)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Look at &lt;a href=&#34;https://github.com/unigornel/xl-debug&#34;&gt;xl-debug&lt;/a&gt; for a script that automates some of the above steps.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Development</title>
      <link>/development/</link>
      <pubDate>Mon, 04 Jul 2016 16:32:28 +0200</pubDate>
      
      <guid>/development/</guid>
      <description>

&lt;p&gt;This project is still in the development phase. Read the &lt;a href=&#34;../development/roadmap/&#34;&gt;Roadmap&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;project-structure&#34;&gt;Project Structure&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Main repository &lt;a href=&#34;https://github.com/unigornel/unigornel&#34;&gt;unigornel&lt;/a&gt;, with submodules

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/unigornel/go&#34;&gt;Go fork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/unigornel/minios&#34;&gt;Mini-OS fork&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;TCP/IP stack &lt;a href=&#34;https://github.com/unigornel/go-tcpip&#34;&gt;go-tcpip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;submitting-a-pull-request&#34;&gt;Submitting a Pull Request&lt;/h2&gt;

&lt;p&gt;It is crucial that the submodules in the &lt;a href=&#34;https://github.com/unigornel/unigornel&#34;&gt;unigornel&lt;/a&gt; repository stay matched.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create a pull requests for every submodule that you update&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;./update.bash&lt;/code&gt; to update the submodule commits&lt;/li&gt;
&lt;li&gt;Create a pull request for the unigornel-repository&lt;/li&gt;
&lt;li&gt;Reference your submodule pull requests in the unigornel pull request (e.g. &lt;em&gt;This PR is related to unigornel/minios#3 and unigornel/go#6&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;design-and-development&#34;&gt;Design and Development&lt;/h2&gt;

&lt;p&gt;If you want to learn how to help develop this project, read&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;../development/debugging/&#34;&gt;Debugging a Unikernel&lt;/a&gt;: Learn how to debug a unikernel with Xen&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;../development/systemcalls/&#34;&gt;System Calls&lt;/a&gt;: Learn about the interface between Mini-OS and Go&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>