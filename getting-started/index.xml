<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Getting-starteds on Unigornel</title>
    <link>/getting-started/</link>
    <description>Recent content in Getting-starteds on Unigornel</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Jul 2016 14:40:23 +0200</lastBuildDate>
    <atom:link href="/getting-started/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting Started</title>
      <link>/getting-started/</link>
      <pubDate>Mon, 04 Jul 2016 14:40:23 +0200</pubDate>
      
      <guid>/getting-started/</guid>
      <description>

&lt;p&gt;This tutorial will guide you through the basic steps of creating a Go unikernel. We assume you have a working 64-bit Xen installation. At the end of this tutorial, you&amp;rsquo;ll be able to print something to the Xen console.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;The unigornel project can be downloaded using &lt;code&gt;go get&lt;/code&gt;. Use this command to get the source of the &lt;code&gt;unigornel&lt;/code&gt; command and its dependencies.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go get -v github.com/unigornel/unigornel/unigornel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;github.com/unigornel/unigornel&lt;/code&gt; repository contains two submodules. These submodules reference to matching versions of the &lt;code&gt;go&lt;/code&gt;-fork and the &lt;code&gt;mini-os&lt;/code&gt; fork. Use &lt;code&gt;git&lt;/code&gt; to update these submodules.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd $GOPATH/src/github.com/unigornel/unigornel
git submodule update --init --recursive
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You are now ready to build the &lt;code&gt;unigornel&lt;/code&gt; command line utility and the fork of the Go programming language. We assume you have a working Go installation in &lt;code&gt;/usr/local/go&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  cd $GOPATH/src/github.com/unigornel/unigornel
  GOROOT_BOOTSTRAP=/usr/local/go make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command will build an edited version of Go and a command line utility called &lt;code&gt;unigornel&lt;/code&gt; (in &lt;code&gt;$GOPATH/bin/unigornel&#39;&lt;/code&gt;. This command line utility is used to actually build unikernels. It relies on the correct values of the environment variables &lt;code&gt;GOROOT&lt;/code&gt;, &lt;code&gt;UNIGORNEL_MINIOS&lt;/code&gt; and &lt;code&gt;PATH&lt;/code&gt; to build unikernels.&lt;/p&gt;

&lt;p&gt;To automatically configure your environment you can use the &lt;code&gt;unigornel env&lt;/code&gt;. This command reads out a configuration file in &lt;code&gt;$HOME/.unigornel.yaml&lt;/code&gt; and spits out the correct environment variables. To generate &amp;ldquo;.unigornel.yaml&amp;rdquo; for your current environment, run&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd $GOPATH/src/github.com/unigornel/unigornel
make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;setup-your-environment&#34;&gt;Setup your environment&lt;/h2&gt;

&lt;p&gt;Make sure the &lt;code&gt;unigornel&lt;/code&gt; command line utility is in your path.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PATH=&amp;quot;$GOPATH/bin:$PATH&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now make sure all environment variables are set correctly.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;eval $(unigornel env)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now use &lt;code&gt;unigornel build&lt;/code&gt; to build unikernels.&lt;/p&gt;

&lt;h2 id=&#34;building-a-unikernel&#34;&gt;Building a unikernel&lt;/h2&gt;

&lt;p&gt;Source code for unikernels should be placed in your GOPATH. We will be compiling a unikernel that prints out &lt;code&gt;Hello World!&lt;/code&gt; to the console.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir $GOPATH/src/helloworld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Put the following code in &lt;code&gt;$GOPATH/src/helloworld/main.go&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-Go&#34;&gt;package main

import &amp;quot;C&amp;quot;
import &amp;quot;fmt&amp;quot;

func main() {}

//export Main
func Main(unused int) {
	fmt.Printf(&amp;quot;Hello World!\n&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now build your unikernel&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd $GOPATH/src/helloworld
unigornel build -o helloworld
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;running-a-unikernel&#34;&gt;Running a unikernel&lt;/h2&gt;

&lt;p&gt;The resulting binary can be executed directly under Xen. The following configuration file can be used. Note that currently a lot of memory is needed, as the memory subsystem is not yet finished.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd $GOPATH/src/helloworld
cat helloworld.xen
kernel = &amp;quot;helloworld&amp;quot;
memory = 256
name = &amp;quot;helloworld&amp;quot;
on_crash = &amp;quot;preserve&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run the unikernel using the &lt;code&gt;xl&lt;/code&gt; command&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xl create -c helloworld.xen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It should generate the following console output&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Xen Minimal OS!
  start_info: 0000000000221000(VA)
    nr_pages: 0x10000
  shared_inf: 0xa8da5000(MA)
     pt_base: 0000000000224000(VA)
nr_pt_frames: 0x5
    mfn_list: 00000000001a1000(VA)
   mod_start: 0x0(VA)
     mod_len: 0
       flags: 0x0
    cmd_line: 
       stack: 000000000015b8c0-000000000017b8c0
MM: Init
      _text: 0000000000000000(VA)
     _etext: 000000000008f559(VA)
   _erodata: 000000000012e000(VA)
     _edata: 000000000012fee0(VA)
stack start: 000000000015b8c0(VA)
       _end: 000000000019bdf8(VA)
  start_pfn: 22c
    max_pfn: 10000
Mapping memory range 0x22c000 - 0x10000000
setting 0000000000000000-000000000012e000 readonly
skipped 1000
MM: Initialise page allocator for 2aa000(2aa000)-10000000(10000000)
MM: done
Demand map pfns at 10001000-0000002010001000.
Initialising timer interface
Initialising console ... done.
gnttab_table mapped at 0000000010001000.
Initialising scheduler
Thread &amp;quot;Idle&amp;quot;: pointer: 0x000000000032e070, stack: 0x0000000000330000
Thread &amp;quot;xenstore&amp;quot;: pointer: 0x000000000032e0d8, stack: 0x0000000000340000
xenbus initialised on irq 1 mfn 0x103e6b
Thread &amp;quot;shutdown&amp;quot;: pointer: 0x000000000032e140, stack: 0x0000000000350000
go_main.c: app_main(000000000017b8c0)
Thread &amp;quot;main&amp;quot;: pointer: 0x000000000032e220, stack: 0x0000000000370000
Thread &amp;quot;initialize_go&amp;quot;: pointer: 0x000000000032e300, stack: 0x0000000000380000
mmap(addr=000000c000000000,len=0x4412000,prot=0x0, flags=0x1002)
mmap(addr=0000000000000000,len=0x40000,prot=0x3, flags=0x1002)
mmap(addr=0000000004410000,len=0x100000,prot=0x3, flags=0x1002)
mmap(addr=0000000004408000,len=0x8000,prot=0x3, flags=0x1002)
mmap(addr=0000000004000000,len=0x1000,prot=0x3, flags=0x1002)
mmap(addr=0000000000000000,len=0x10000,prot=0x3, flags=0x1002)
Thread &amp;quot;pthread-0&amp;quot;: pointer: 0x000000000032e488, stack: 0x00000000003a0000
mmap(addr=0000000000000000,len=0x40000,prot=0x3, flags=0x1002)
Thread &amp;quot;pthread-1&amp;quot;: pointer: 0x000000000032e5a0, stack: 0x00000000003b0000
Hello World!
crash: go_main.c, line 20: main thread must not return
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>